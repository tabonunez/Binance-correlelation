

from binance.client import Client
import pandas as pd
import numpy as np
import datetime as dt
import matplotlib.pyplot as plt
import seaborn
import sys

client = Client('User", 'Pass')

def Get_historical_data(Symbol, interval, date):
  symbol = Symbol + "USDT"
  interval=interval
  klines = client.get_historical_klines(symbol, interval, start_str=date)
  data = pd.DataFrame(klines)
  # create colums name
  data.columns = ['open_time','open', 'high', 'low', 'close', 'volume','close_time', 'qav','num_trades','taker_base_vol',"taker_quote_vol", "ignore"]
          
  # change the timestamp
  data.index = [dt.datetime.fromtimestamp(x/1000.0) for x in data.close_time]
  data.to_csv(symbol+'.csv', index = None, header=True)
  #convert data to float and plot
  df=data.astype(float)
  df["close"].plot(title = Symbol+"/USDT", legend = 'close')
  plt.show()

#Get_historical_data("BTC","1d","2022-08-08")

def Get_historical_Vol(symbol, interval,date):
  symbol = symbol + "USDT"
  interval=interval
  klines = client.get_historical_klines(symbol, interval, start_str=date)
  data = pd.DataFrame(klines)
  # create colums name
  data.columns = ['open_time','open', 'high', 'low', 'close', 'volume','close_time', 'qav','num_trades','taker_base_vol',"taker_quote_vol", "ignore"]
          
  # change the timestamp
  data.index = [dt.datetime.fromtimestamp(x/1000.0) for x in data.close_time]
  data.to_csv(symbol+'.csv', index = None, header=True)
  #convert data to float and plot
  df=data.astype(float)
  df['Log returns'] = np.log(df['close']/df['close'].shift())
  df['Log returns'].std()
  volatility = df['Log returns'].std()*252**.5
  str_vol = str(round(volatility, 4)*100)
  
  fig, ax = plt.subplots()
  df["Log returns"].hist(ax=ax, bins=50, alpha=0.6, color="b")
  ax.set_xlabel("Log return")
  ax.set_ylabel("Freq of log return")
  ax.set_title(symbol + " volatility: " + str_vol + "%")
  plt.show()

#Get_historical_Vol("ETH","1d", "2022-01-08")

def cor(date, *arguments):
        txt=[]
        for i in arguments:
            txt.append(i.replace(" ",""))   
        symbols_list =txt[0].split(",")
        symbols=[]
        for ticker in symbols_list:     
            klines = client.get_historical_klines(ticker+"USDT", "1d", start_str=date)
            data = pd.DataFrame(klines)
            # create colums name
            data.columns = ['open_time','open', 'high', 'low', 'close', 'volume','close_time', 'qav','num_trades','taker_base_vol',"taker_quote_vol", "ignore"]
                        
            # change the timestamp
            data.index = [dt.datetime.fromtimestamp(x/1000.0) for x in data.close_time]
            #convert data to float and plot (ELIMINAR)
            data['Symbol'] = ticker    
            symbols.append(data)
        df = pd.concat(symbols)       
        df = df.reset_index()
        df = df[['index', 'close', 'Symbol']]
        df.head()
        df_pivot=df.pivot('index','Symbol','close').reset_index()
        df_pivot.head()
        for i in symbols_list:
             df_pivot[i]=df_pivot[i].astype(float)
        #correlation
        corr_df = df_pivot.corr(method='pearson')
        #reset symbol as index (rather than 0-X)
        corr_df.head().reset_index()
        #del corr_df.index.name
        corr_df.head(10)

        plt.figure(figsize=(13, 8))
        seaborn.heatmap(corr_df, annot=True, cmap="RdYlGn")
        plt.figure()
        plt.show()

#cor("2022-08-08","SHIB, DOGE, LUNA")

def HistCor(Symbol1,Symbol2): 
        symbols_list = [Symbol1, Symbol2]
        symbols=[]
        dates=["2022-09-01","2022-06-01"]
        for ticker in symbols_list:     
            klines = client.get_historical_klines(ticker+"USDT", "1d", start_str="2020-01-01")
            data = pd.DataFrame(klines)
            # create colums name
            data.columns = ['open_time','open', 'high', 'low', 'close', 'volume','close_time', 'qav','num_trades','taker_base_vol',"taker_quote_vol", "ignore"]                       
            # change the timestamp
            data.index = [dt.datetime.fromtimestamp(x/1000.0) for x in data.close_time]
            #convert data to float and plot (ELIMINAR)
            data['Symbol'] = ticker    
            symbols.append(data)
        df = pd.concat(symbols)       
        df = df.reset_index()
        df = df[['index', 'close', 'Symbol']]
        df.head()
        df_pivot=df.pivot('index','Symbol','close').reset_index()
        df_pivot.head()
        for i in symbols_list:
             df_pivot[i]=df_pivot[i].astype(float)
             df_pivot[i] =  np.log(1 + df_pivot[i].pct_change())
        #correlation
        corr_df = df_pivot.corr(method='pearson')
        #reset symbol as index (rather than 0-X)
        corr_df.head().reset_index()
        #del corr_df.index.name
        corr_df.head(10)

        plt.figure(figsize=(13, 8))
        seaborn.heatmap(corr_df, annot=True, cmap="RdYlGn")
        plt.figure()
        plt.show()

def Fut_cor(date,*arguments):
    txt=[]
    for i in arguments:
        txt.append(i.replace(" ",""))   
    symbols_list =txt[0].split(",")
    
    symbols=[]
    for ticker in symbols_list:     
            klines = pd.DataFrame(client.futures_historical_klines(
            symbol=ticker+'USDT',
            interval='1d',
            start_str=date,
            end_str= None 
        ))
            data = pd.DataFrame(klines)
            # create colums name
            data.columns = ['open_time','open', 'high', 'low', 'close', 'volume','close_time', 'qav','num_trades','taker_base_vol',"taker_quote_vol", "ignore"]
                        
            # change the timestamp
            data.index = [dt.datetime.fromtimestamp(x/1000.0) for x in data.close_time]
            #convert data to float and plot (ELIMINAR)
            data['Symbol'] = ticker    
            symbols.append(data)
    df = pd.concat(symbols)       
    df = df.reset_index()
    df = df[['index', 'close', 'Symbol']]
    df.head()
    df_pivot=df.pivot('index','Symbol','close').reset_index()
    df_pivot.head()
    for i in symbols_list:
          df_pivot[i]=df_pivot[i].astype(float)
          df_pivot[i] =  np.log(1 + df_pivot[i].pct_change())
    #correlation
    corr_df = df_pivot.corr(method='pearson')
    #reset symbol as index (rather than 0-X)
    corr_df.head().reset_index()
    #del corr_df.index.name
    corr_df.head(10)

    plt.figure(figsize=(13, 8))
    seaborn.heatmap(corr_df, annot=True, cmap="RdYlGn")
    plt.figure()
    
    if len(symbols_list) ==2:
      df= corr_df
      # plot 
      # ====================================
      seaborn.set_style('ticks')
      seaborn.regplot(df_pivot[symbols_list[0]], df_pivot[symbols_list[1]], ci=None)
      seaborn.despine() 
    plt.show()

Fut_cor("2022-06-06", "BTC, DOGE")

symbols_list =["ETH","BTC"]

symbols=[]
for ticker in symbols_list:     
        klines = pd.DataFrame(client.futures_historical_klines(
        symbol=ticker+'USDT',
        interval='1d',
        start_str="2022-01-01",
        end_str= None 
    ))
        data = pd.DataFrame(klines)
        # create colums name
        data.columns = ['open_time','open', 'high', 'low', 'close', 'volume','close_time', 'qav','num_trades','taker_base_vol',"taker_quote_vol", "ignore"]
                    
        # change the timestamp
        data.index = [dt.datetime.fromtimestamp(x/1000.0) for x in data.close_time]
        #convert data to float and plot (ELIMINAR)
        data['Symbol'] = ticker    
        symbols.append(data)
df = pd.concat(symbols)       
df = df.reset_index()
df = df[['index', 'close', 'Symbol']]
df.head()
df_pivot=df.pivot('index','Symbol','close').reset_index()
df_pivot.head()
for i in symbols_list:
      df_pivot[i]=df_pivot[i].astype(float)
df_pivot['ETHpct_change'] = df_pivot["ETH"].pct_change()
df_pivot['ETH'] =  np.log(1 + df_pivot["ETHpct_change"])
print(df_pivot)

from datetime import date
import datetime as dd
def pre_month(months):
    abc = date(dd.datetime.today().year, dd.datetime.today().month, dd.datetime.today().day)
    month, year = (abc.month-months, abc.year) if abc.month != 1 else (12, abc.year-1)
    pre_month = abc.replace(day=dd.datetime.today().day, month=month, year=year)
    return str(pre_month)

#Fut_cor(pre_month(1),"DOT, BTC, ETH")



class Menu:
        def __init__(self):
                self.elecciones = {
                        "1": self.GetPrice,
                        "2": self.GetVol,
                        "4": self.GetSpotCor,
                        "0":  self.quit,
                        "3A": self.GetPerpCorA,
                        "3B": self.GetPerpCorB,
                        "3C": self.GetPerpCorC,
                        "3D": self.GetPerpCor
			              }


        def mostrar_menu(self):
            print("""
		               Menu Cuaderno

                1 Get price
                2 Get volatility
                3 Get Perpetual correlation
                4 Get Spot correlation
                0 Exit
                
                
                """)
        def mostrar_opciones(self):
          print("""Get Perpetual correlation
                  A. 1 month
                  B. 3 Months
                  C. 6 Monts
                  D. Choose one date
          
          
          """)


        def  run(self):
		       while True:
                                self.mostrar_menu()
                                eleccion = input("Type an option:")
                                while eleccion ==str(3):
                                      self.mostrar_opciones()
                                      eleccion = eleccion + input("Type an option")
                                accion = self.elecciones.get(eleccion)
                                if accion:
                                        accion()
                                             
                                else:
                                        print ("{0} Is not a valid option".format(eleccion))

                
                                        
        def GetPrice(self):
          Symbol=input("Type Symbol")
          interval=input("Type Interval")
          Date= Date= input("Type start date (YYYY-MM-DD)")
          Get_historical_data(Symbol,interval, Date)
        def GetVol(self):
          Symbol=input("Type Symbol")
          interval=input("Type interval")
          Date= input("Type start date (YYYY-MM-DD)")
          Get_historical_Vol(Symbol,interval,Date)
        def GetPerpCor(self):
          Symbol=input("Type Symbols")
          date= input("Type start date (YYYY-MM-DD)")
          Fut_cor(date,Symbol)
        def GetSpotCor(slef):
          Symbol=input("Type Symbols")
          date= input("Type start date (YYYY-MM-DD)")
          cor(date,Symbol)
        def GetPerpCorA(self):
          Symbol= input("Type Symbols")
          date= pre_month(1)
          Fut_cor(date,Symbol)
        def GetPerpCorB(self):
          Symbol= input("Type Symbols")
          date= pre_month(3)
          Fut_cor(date,Symbol)
        def GetPerpCorC(self):
          Symbol= input("Type Symbols")
          date= pre_month(6)
          Fut_cor(date,Symbol)


        def quit(self):
                                print("Thanks for your attention")
                                sys.exit(0) 
Menu().run()
